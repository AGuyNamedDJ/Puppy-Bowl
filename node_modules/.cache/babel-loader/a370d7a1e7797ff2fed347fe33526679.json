{"ast":null,"code":"var _jsxFileName = \"/Users/agndj/Desktop/Coding/Fullstack Academy/Project-04/Puppy-Bowl/src/index.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PuppyBowl = () => {\n  var _s = $RefreshSig$();\n  // Writing Starter Code\n\n  // Declaring State\n  const PuppyBowl = () => {\n    _s();\n    // This is an empty starter plate;\n    const [contestants, setContestants] = useState([]);\n\n    // Fetch Data\n\n    useEffect(() => {\n      // Here we are grabbing data from the Puppl Bowl API\n      async function fetchPuppyBowlData() {\n        // Try Block\n        // Will TRY to run the code as normal;\n        try {\n          // Fetch method to get data from the URL;\n          const response = await fetch(\"https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players\");\n\n          // Convert promise response into JSON;\n          const puppyData = await response.json();\n          console.log(\"Here is the translated data from the promise response: \", puppyData);\n          console.log(\"Here is the REAL data: \", data.results);\n\n          // Sava data from response promise & update state;\n          setContestants(puppyData.data.results);\n          // Correct this as of class question\n\n          // Catch Block\n          // Will run if the TRY section fails to run;\n        } catch (error) {\n          console.log(error);\n        }\n      }\n      fetchPuppyBowlData();\n    }, []);\n\n    // Rendering the Game State\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Puppy Bowl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: contestants && contestants.length ? puppyPlayers.map((puppy, idx) => {\n          // Terenary ^\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Name of Contestant: \", puppy.name]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Pup Breed: \", puppy.breed]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: puppy.imageUrl\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 25\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 28\n          }, this);\n        }) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No pups to display:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this);\n  };\n  _s(PuppyBowl, \"2LtDvJ6FDUqcsKKgwMd79KXMC7k=\");\n};\n_c = PuppyBowl;\nvar _c;\n$RefreshReg$(_c, \"PuppyBowl\");","map":{"version":3,"names":["React","useEffect","useState","createRoot","PuppyBowl","contestants","setContestants","fetchPuppyBowlData","response","fetch","puppyData","json","console","log","data","results","error","length","puppyPlayers","map","puppy","idx","name","breed","imageUrl"],"sources":["/Users/agndj/Desktop/Coding/Fullstack Academy/Project-04/Puppy-Bowl/src/index.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nconst PuppyBowl = () => {\n\n// Writing Starter Code\n\n// Declaring State\nconst PuppyBowl = () => {\n    // This is an empty starter plate;\n    const [contestants, setContestants] = useState([]);\n\n    // Fetch Data\n\n    useEffect(() => {\n        // Here we are grabbing data from the Puppl Bowl API\n        async function fetchPuppyBowlData () {\n\n            // Try Block\n                // Will TRY to run the code as normal;\n            try {\n                // Fetch method to get data from the URL;\n                const response = await fetch (\"https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players\");\n\n                // Convert promise response into JSON;\n                const puppyData = await response.json();\n                console.log(\"Here is the translated data from the promise response: \", puppyData);\n                console.log(\"Here is the REAL data: \", data.results);\n\n                // Sava data from response promise & update state;\n                setContestants(puppyData.data.results)\n                    // Correct this as of class question\n\n\n            // Catch Block\n                // Will run if the TRY section fails to run;\n            } catch (error){\n                console.log(error)\n            }\n        }\n        fetchPuppyBowlData()\n    }, [])\n\n    // Rendering the Game State\n    return (\n        <div>\n            <h1>Puppy Bowl</h1>\n\n            <div>\n                {\n                    contestants && contestants.length ? puppyPlayers.map((puppy, idx) => {\n                        // Terenary ^\n                    return <div key={idx}>\n                        <p>Name of Contestant: {puppy.name}</p>\n                        <p>Pup Breed: {puppy.breed}</p>\n                        <img src={puppy.imageUrl}></img>    \n                    </div>               \n                }) : <p>No pups to display:</p>\n            } \n            </div>   \n        </div>\n    )\n}};"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,kBAAkB;AAAC;AAE9C,MAAMC,SAAS,GAAG,MAAM;EAAA;EAExB;;EAEA;EACA,MAAMA,SAAS,GAAG,MAAM;IAAA;IACpB;IACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;;IAElD;;IAEAD,SAAS,CAAC,MAAM;MACZ;MACA,eAAeM,kBAAkB,GAAI;QAEjC;QACI;QACJ,IAAI;UACA;UACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,qEAAqE,CAAC;;UAEpG;UACA,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;UACvCC,OAAO,CAACC,GAAG,CAAC,yDAAyD,EAAEH,SAAS,CAAC;UACjFE,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,IAAI,CAACC,OAAO,CAAC;;UAEpD;UACAT,cAAc,CAACI,SAAS,CAACI,IAAI,CAACC,OAAO,CAAC;UAClC;;UAGR;UACI;QACJ,CAAC,CAAC,OAAOC,KAAK,EAAC;UACXJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;QACtB;MACJ;MACAT,kBAAkB,EAAE;IACxB,CAAC,EAAE,EAAE,CAAC;;IAEN;IACA,oBACI;MAAA,wBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAmB,eAEnB;QAAA,UAEQF,WAAW,IAAIA,WAAW,CAACY,MAAM,GAAGC,YAAY,CAACC,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,KAAK;UACjE;UACJ,oBAAO;YAAA,wBACH;cAAA,mCAAwBD,KAAK,CAACE,IAAI;YAAA;cAAA;cAAA;cAAA;YAAA,QAAK,eACvC;cAAA,0BAAeF,KAAK,CAACG,KAAK;YAAA;cAAA;cAAA;cAAA;YAAA,QAAK,eAC/B;cAAK,GAAG,EAAEH,KAAK,CAACI;YAAS;cAAA;cAAA;cAAA;YAAA,QAAO;UAAA,GAHnBH,GAAG;YAAA;YAAA;YAAA;UAAA,QAId;QACV,CAAC,CAAC,gBAAG;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAA0B;QAAA;QAAA;QAAA;MAAA,QAE7B;IAAA;MAAA;MAAA;MAAA;IAAA,QACJ;EAEd,CAAC;EAAA,GAtDKjB,SAAS;AAsDd,CAAC;AAAC,KA3DGA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module"}