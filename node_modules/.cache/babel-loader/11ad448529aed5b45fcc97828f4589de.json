{"ast":null,"code":"var _jsxFileName = \"/Users/agndj/Desktop/Coding/Fullstack Academy/Project-04/Puppy-Bowl/src/index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PuppyBowl = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Puppy Bowl\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"( )\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n};\n\n// Writing Starter Code\n_c = PuppyBowl;\nconst puppyBowlRosterArr = [\"Contestant\", \"Kenny\"];\n// update when found\n\n// Declaring State\nconst Contestants = () => {\n  _s();\n  // This is an empty starter plate;\n  const [contestant, setContestant] = useState([]);\n\n  // Fetch Data\n  useEffect(() => {\n    // Here we are grabbing data from the Puppl Bowl API\n    async function fetchPuppyBowlData() {\n      // Try Block\n      // Will TRY to run the code;\n      try {\n        // Fetch method that will get some data from the URL;\n        const response = await fetch(\"https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players\");\n\n        // Convert promise response into JSON;\n        const puppyData = await response.json();\n        console.log(\"Here is the translated data from the promise response: \", data);\n        console.log(\"Here is the REAL data from the above translated data\", data.results);\n\n        // Sava data from response promise & update state;\n        setContestant(data.results);\n\n        // Catch Block\n        // Will run if the TRY section fails to run;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchPuppyBowlData;\n  }, []);\n  // Ask what this mean because I don't understand it\n};\n_s(Contestants, \"S9fyKhx6cF5bwf3k8LOQs2l/hgE=\");\n_c2 = Contestants;\nvar _c, _c2;\n$RefreshReg$(_c, \"PuppyBowl\");\n$RefreshReg$(_c2, \"Contestants\");","map":{"version":3,"names":["React","useState","createRoot","PuppyBowl","puppyBowlRosterArr","Contestants","contestant","setContestant","useEffect","fetchPuppyBowlData","response","fetch","puppyData","json","console","log","data","results","error"],"sources":["/Users/agndj/Desktop/Coding/Fullstack Academy/Project-04/Puppy-Bowl/src/index.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nconst PuppyBowl = () => {\n    return (\n        <div>\n            <h1>Puppy Bowl</h1>\n            <div>\n            (\n                \n\n\n\n            )\n\n\n            </div>\n        </div>\n    )\n};\n\n// Writing Starter Code\nconst puppyBowlRosterArr = [\"Contestant\", \"Kenny\"]\n    // update when found\n\n// Declaring State\nconst Contestants = () => {\n    // This is an empty starter plate;\n    const [contestant, setContestant] = useState([])\n\n    // Fetch Data\n    useEffect(() => {\n        // Here we are grabbing data from the Puppl Bowl API\n        async function fetchPuppyBowlData () {\n\n            // Try Block\n                // Will TRY to run the code;\n            try {\n                // Fetch method that will get some data from the URL;\n                const response = await fetch (\"https://fsa-puppy-bowl.herokuapp.com/api/2209-ftb-mt-web-ft/players\");\n\n                // Convert promise response into JSON;\n                const puppyData = await response.json();\n                console.log(\"Here is the translated data from the promise response: \", data)\n                console.log(\"Here is the REAL data from the above translated data\", data.results)\n\n                // Sava data from response promise & update state;\n                setContestant(data.results)\n\n\n            // Catch Block\n                // Will run if the TRY section fails to run;\n            } catch (error){\n                console.log(error)\n\n            }\n\n        }\n        fetchPuppyBowlData;\n\n    }, [])\n    // Ask what this mean because I don't understand it\n\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,UAAU,QAAQ,kBAAkB;AAAC;AAE9C,MAAMC,SAAS,GAAG,MAAM;EACpB,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB,eACnB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QASM;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEd,CAAC;;AAED;AAAA,KAlBMA,SAAS;AAmBf,MAAMC,kBAAkB,GAAG,CAAC,YAAY,EAAE,OAAO,CAAC;AAC9C;;AAEJ;AACA,MAAMC,WAAW,GAAG,MAAM;EAAA;EACtB;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACAO,SAAS,CAAC,MAAM;IACZ;IACA,eAAeC,kBAAkB,GAAI;MAEjC;MACI;MACJ,IAAI;QACA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,qEAAqE,CAAC;;QAEpG;QACA,MAAMC,SAAS,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;QACvCC,OAAO,CAACC,GAAG,CAAC,yDAAyD,EAAEC,IAAI,CAAC;QAC5EF,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEC,IAAI,CAACC,OAAO,CAAC;;QAEjF;QACAV,aAAa,CAACS,IAAI,CAACC,OAAO,CAAC;;QAG/B;QACI;MACJ,CAAC,CAAC,OAAOC,KAAK,EAAC;QACXJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;MAEtB;IAEJ;IACAT,kBAAkB;EAEtB,CAAC,EAAE,EAAE,CAAC;EACN;AAEJ,CAAC;AAAA,GArCKJ,WAAW;AAAA,MAAXA,WAAW;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module"}